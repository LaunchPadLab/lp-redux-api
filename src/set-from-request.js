import { set } from './utils'

/**
 * A function that creates action handlers for actions generated by {@link requestWithKey}.
 * These handlers set data at a path in the state from the response(s) of a given request.
 *
 * By default, setFromRequest creates handlers for `<requestKey>_SUCCESS` and `<requestKey>_FAILURE` action types.
 * You can override either of these handlers in your reducer by creating handlers explicitly.
 *
 * When using this method, it's recommended that the API follows the convention of nesting all response data under `data` and all errors under `error`.
 *
 * @param {String} requestKey - A unique key that references a request created by {@link requestWithKey}
 * @param {String} path - A path (in dot notation) indicating where the data will be set in the state
 * @returns {Object} A hash of action handlers that can be included in a reducer by using object spread syntax
 * @example
 * 
 * const REQ_FETCH_USERS = 'REQ_FETCH_USERS'
 * 
 *  const initialState = {
 *   user: {
 *     data: null,
 *     error: null
 *   }
 *  }
 * 
 * export const reducer = (state=initialState, action) => {
 *   const handlers = {
 *     ...setFromRequest(REQ_FETCH_USERS, 'user')
 *   }
 *   const handler = handlers[action.type]
 *   if (!handler) return state
 *   return handler(state, action)
 * }
 * 
 * // On success, this call returns userData
 * const fetchUsers = requestWithKey(REQ_FETCH_USERS, { url: '/users' })
 * 
 * dispatch(fetchUsers()) 
 * 
 * // On success, new state will be:
 * // {
 * //    user: userData
 * // }
 *
**/

export default function setFromRequest (requestKey, path) {
  if (!requestKey) throw 'Must include a key for the request handled by setFromRequest().'
  if (!path) throw 'Must include path to be set by setFromRequest().'
  return {
    [`${requestKey}_SUCCESS`]: (state, action) => set(path, action.payload, state),
    [`${requestKey}_FAILURE`]: (state, action) => set(path, action.payload, state),
  }
}
